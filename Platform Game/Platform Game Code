import pygame
from pygame.locals import *
def show_text(msg, x, y, color, size):
        fontobj= pygame.font.SysFont("freesans", size)
        msgobj = fontobj.render(msg,False,color)
        screen.blit(msgobj,(x, y))
pygame.init()
screen = pygame.display.set_mode((760,400))
clock = pygame.time.Clock()
yellow = (255,0,0)
white = (0,0,0)
black = (255,255,255)


## setting up the animation pictures
run = []
for i in range(0,10):
    img = pygame.image.load(r'Temple Run Sprites\Figure\Run__00'+str(i)+'.png')
    img = pygame.transform.scale(img,(28,40))
    run.append(img)

idle = []
for i in range(0,10):
    img = pygame.image.load(r'Temple Run Sprites\Figure\Idle__00'+str(i)+'.png')
    img = pygame.transform.scale(img,(28,40))
    idle.append(img)

jump = []
for i in range(0,10):
    img = pygame.image.load(r'Temple Run Sprites\Figure\Jump__00'+str(i)+'.png')
    img = pygame.transform.scale(img,(28,40))
    jump.append(img)

## setting up the grid displaying the tiles
tile_layout = [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
               [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1],
               [1,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,1],
               [1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1],
               [1,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,1],
               [1,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1],
               [1,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1],
               [1,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,1,0,1],
               [1,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,1],
               [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]]


## the tile and the coins
tile_surface_list = []
coin_cordinates = []
portal_blueprint = None

## adding surfaces or cordinates to the two lists
for row in range(len(tile_layout)):
    tile_column = []
    for column in range(len(tile_layout[row])):
        if tile_layout[row][column] == 1:

            ## adding the tile
            tile = pygame.image.load(r'Temple Run Sprites\Tile\1.png')
            tile = pygame.transform.scale(tile,(40,40))
            tile_column.append(tile)

        else:

            ## making it zero so the iteration
            tile_column.append(0)

            ## adding coins cordinates 
            if tile_layout[row][column] == 2:
                coin_cordinate = (column*40 + 20,row*40 + 20)
                coin_cordinates.append(coin_cordinate)
            
            ## adding the portal
            elif tile_layout[row][column] == 3:
                portal_blueprint = (column*40,row*40,40,40)

    tile_surface_list.append(tile_column)

## setting up the winning variable and having it as a counter so the person can really see the character in
## the portal
win_counter = False

## setting up the character's attributes
character_xpos = 100
character_ypos = 280

character_direction = 'right'
character_mode = 'idle'

character_momentum = 0
character_speed = 0

character_frame_timer = 0
current_character_frame = 0

isjump = False

while True:

    ## filling the screen with a specific color
    screen.fill((150,75,0))

## drawing the character
    if character_mode == 'idle':
        character = screen.blit(idle[current_character_frame],(character_xpos,character_ypos))
    elif character_mode == 'run':
        character = screen.blit(run[current_character_frame],(character_xpos,character_ypos))
    elif character_mode == 'jump':
        character = screen.blit(jump[current_character_frame],(character_xpos,character_ypos))

    ## making the character jump 
    character_ypos = character_ypos - character_momentum

    ## moving the character when walking 
    character_xpos = character_xpos + character_speed


    ## adding gravity to make the character fall
    if isjump == True:
        if character_momentum > -10:
            character_momentum = character_momentum - 1

    isjump = True

## drawing all the tiles and checking if the character collides with the tile to no longer make the character jump

    for row in range(len(tile_layout)):
        for column in range(len(tile_layout[row])):

            if tile_layout[row][column] == 1:

                ## loading the tile onto the screen
                tile = screen.blit(tile_surface_list[row][column],(column*40,row*40))

                ## checking if the character collides with the top of a tile 
                if character_xpos + 28 > tile.x and tile.x + 40 > character_xpos:
                    if character_ypos + 40 >= tile.y and character_ypos + 40 <= tile.y + 10:
                        character_ypos = tile.y - 40
                        character_momentum = 0
                        isjump = False

                ## checking if the character collides with the sides of a tile
                if character_ypos + 40 > tile.y and tile.y + 40 > character_ypos:
                    if character_xpos + 28 > tile.x and character_xpos + 28 <= tile.x + 5:
                        character_xpos = tile.x - 28
                    if tile.x + 40 > character_xpos and tile.x + 35 <= character_xpos:
                        character_xpos = tile.x + 40

                ## checking if the character collides with the bottom of the tile
                if character_xpos + 28 > tile.x and tile.x + 40 > character_xpos:
                    if character_ypos < tile.y + 40 and character_ypos >= tile.y + 28:
                        character_ypos = tile.y + 40
                        if character_momentum > 0:
                            character_momentum = 0


    ## iteration through the coins
    coin_counter = 0
    while True:

        if coin_counter == len(coin_cordinates):
            break

        ## drawing the coin, checking if it collides with the player, and updating it the coin counter only if it doesn't collide
        coin = pygame.draw.circle(screen,yellow,coin_cordinates[coin_counter],20)
        if coin.colliderect(character):
            coin_cordinates.pop(coin_counter)
        else:
            coin_counter = coin_counter + 1

    ## checking if the character collides with the portal
    if len(coin_cordinates) == 0:
        portal = pygame.draw.rect(screen,white,portal_blueprint)
        if portal.colliderect(character):
        ## drawing the character so the player can see the character going through the portal
            if character_mode == 'idle':
                character = screen.blit(idle[current_character_frame],(character_xpos,character_ypos))
            elif character_mode == 'run':
                character = screen.blit(run[current_character_frame],(character_xpos,character_ypos))
            elif character_mode == 'jump':
                character = screen.blit(jump[current_character_frame],(character_xpos,character_ypos))
            win_counter = True
    
    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            exit()

        elif event.type == KEYDOWN:
            if event.key == K_SPACE and isjump == False:

                ## making the character jump
                isjump = True
                character_mode = 'jump'
                character_momentum = 12
                current_character_frame = 0
                character_frame_timer = 0

            if event.key == K_RIGHT:
                ## flippping the character images over 
                if character_direction == 'left':
                    for i in range(len(idle)):
                        idle[i] = pygame.transform.flip(idle[i],True,False)
                    for i in range(len(run)):
                        run[i] = pygame.transform.flip(run[i],True,False)
                    for i in range(len(jump)):
                        jump[i] = pygame.transform.flip(jump[i],True,False)
                character_direction = 'right'
                character_speed = 5

            if event.key == K_LEFT:
                if character_direction == 'right':
                    for i in range(len(idle)):
                        idle[i] = pygame.transform.flip(idle[i],True,False)
                    for i in range(len(run)):
                        run[i] = pygame.transform.flip(run[i],True,False)
                    for i in range(len(jump)):
                        jump[i] = pygame.transform.flip(jump[i],True,False)
                character_direction = 'left'
                character_speed = -5
                
        elif event.type == KEYUP:
            if event.key == K_LEFT and character_direction == 'left' or event.key ==  K_RIGHT and character_direction == 'right':
                character_speed = 0
                if character_mode == 'run':
                    character_mode = 'idle'

                
    ## updating the animation_frame
    character_frame_timer = character_frame_timer + 1
    if character_frame_timer == 2:
        current_character_frame = current_character_frame + 1
        character_frame_timer = 0
        
    ## making the character stop jumping
    if current_character_frame == 9 or isjump == False:
        if character_speed != 0:
            character_mode = 'run'
        else:
            character_mode = 'idle'

    if current_character_frame == 9:
        current_character_frame = 0

    ## updating the window
    clock.tick(30)
    pygame.display.update()

    ## ending the game
    if win_counter == True:
        screen.fill(black)
        show_text('Congraduations Level 1 Completed',100,100,white,30)
        pygame.display.update()
        clock.tick(1)
        pygame.quit()
        exit()
